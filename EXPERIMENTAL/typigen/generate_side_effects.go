package typigen

import (
	"io/ioutil"
	"strings"

	log "github.com/sirupsen/logrus"
	"github.com/typical-go/typical-rest-server/EXPERIMENTAL/internal/bash"
	"github.com/typical-go/typical-rest-server/EXPERIMENTAL/typictx"
	"github.com/typical-go/typical-rest-server/EXPERIMENTAL/typienv"
)

const (
	sideEffectTarget = "t_side_effects.go"
)

// GenerateDevToolSideEffects generate side effect for typical-dev-tool
func GenerateDevToolSideEffects(t typictx.Context) error {
	log.Infof("Generate typical dev tool side effects: %s", sideEffectTarget)
	var libraries []string
	for _, module := range t.Modules {
		for _, sideEffect := range module.SideEffects {
			if sideEffect.TypicalDevToolFlag {
				libraries = append(libraries, sideEffect.Library)
			}
		}
	}
	filename := typienv.TypicalDevToolMainPackage() + "/" + sideEffectTarget
	return generateSideEffects(filename, libraries)
}

// GenerateAppSideEffects generate side effect for application
func GenerateAppSideEffects(t typictx.Context) error {
	log.Infof("Generate application side effects: %s", sideEffectTarget)
	var libraries []string
	for _, module := range t.Modules {
		for _, sideEffect := range module.SideEffects {
			if sideEffect.AppFlag {
				libraries = append(libraries, sideEffect.Library)
			}
		}
	}

	filename := typienv.AppMainPackage() + "/" + sideEffectTarget
	return generateSideEffects(filename, libraries)
}

func generateSideEffects(filename string, libraries []string) (err error) {

	// TODO: make encapsulation so all generated code can be handle
	builder := &strings.Builder{}
	builder.WriteString("// Generated by Typical-Go. DO NOT EDIT.\n\n")
	builder.WriteString("package main\n")

	if len(libraries) > 0 {
		builder.WriteString("import(\n")

		for _, sideEffect := range libraries {
			builder.WriteString("_ \"" + sideEffect + "\"\n")
		}

		builder.WriteString(")")
	}

	err = ioutil.WriteFile(filename, []byte(builder.String()), 0644)
	if err != nil {
		return
	}

	bash.GoFmt(filename)
	return
}
