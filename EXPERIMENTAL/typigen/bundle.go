package typigen

import (
	"io/ioutil"
	"log"
	"strings"

	"github.com/typical-go/typical-rest-server/EXPERIMENTAL/internal/util"
	"github.com/typical-go/typical-rest-server/EXPERIMENTAL/typictx"
	"github.com/typical-go/typical-rest-server/EXPERIMENTAL/typienv"
)

const (
	mainInitFile = "init.go"
)

// TaskToolSideEffects generate side effect for CLI
func TaskToolSideEffects(t typictx.Context) error {
	log.Println("Update task tool side effects")
	var sideEffects []string
	for _, module := range t.Modules {
		sideEffects = append(sideEffects, module.SideEffects...)
		sideEffects = append(sideEffects, module.TypiCliSideEffects...)
	}
	filename := typienv.TypicalMainPackage() + "/" + mainInitFile
	return bundleSideEffects(filename, sideEffects)
}

// AppSideEffects generate side effect for application
func AppSideEffects(t typictx.Context) error {
	log.Println("Update application side effects")
	var sideEffects []string
	for _, module := range t.Modules {
		sideEffects = append(sideEffects, module.SideEffects...)
		sideEffects = append(sideEffects, module.TypiAppSideEffects...)
	}

	filename := typienv.MainPackage(t.AppPkgOrDefault()) + "/" + mainInitFile
	return bundleSideEffects(filename, sideEffects)
}

func bundleSideEffects(filename string, sideEffects []string) (err error) {

	// TODO: make encapsulation so all generated code can be handle
	builder := &strings.Builder{}
	builder.WriteString("// Generated by Typical-Go. DO NOT EDIT.\n\n")
	builder.WriteString("package main\n")

	if len(sideEffects) > 0 {
		builder.WriteString("import(\n")

		for _, sideEffect := range sideEffects {
			builder.WriteString("_ \"" + sideEffect + "\"\n")
		}

		builder.WriteString(")")
	}

	err = ioutil.WriteFile(filename, []byte(builder.String()), 0644)
	if err != nil {
		return
	}

	util.RunOrFatalSilently(util.GoCommand(), "fmt", filename)

	return

}
