package typical

/* Autogenerated by Typical-Go. DO NOT EDIT.

TagName:
	@envconfig

Help:
	https://pkg.go.dev/github.com/typical-go/typical-rest-server/pkg/typcfg
*/

import (
	"fmt"

	"github.com/kelseyhightower/envconfig"
	"github.com/typical-go/typical-go/pkg/typapp"
	"github.com/typical-go/typical-rest-server/internal/app/infra"
)

func init() {
	typapp.AppendCtor(
		&typapp.Constructor{Name: "", Fn: LoadAppCfg},
		&typapp.Constructor{Name: "", Fn: LoadRedisCfg},
		&typapp.Constructor{Name: "", Fn: LoadPostgresCfg},
	)
}

// LoadAppCfg load env to new instance of AppCfg
func LoadAppCfg() (*infra.AppCfg, error) {
	var cfg infra.AppCfg
	prefix := "APP"
	if err := envconfig.Process(prefix, &cfg); err != nil {
		return nil, fmt.Errorf("%s: %w", prefix, err)
	}
	return &cfg, nil
}

// LoadRedisCfg load env to new instance of RedisCfg
func LoadRedisCfg() (*infra.RedisCfg, error) {
	var cfg infra.RedisCfg
	prefix := "REDIS"
	if err := envconfig.Process(prefix, &cfg); err != nil {
		return nil, fmt.Errorf("%s: %w", prefix, err)
	}
	return &cfg, nil
}

// LoadPostgresCfg load env to new instance of PostgresCfg
func LoadPostgresCfg() (*infra.PostgresCfg, error) {
	var cfg infra.PostgresCfg
	prefix := "PG"
	if err := envconfig.Process(prefix, &cfg); err != nil {
		return nil, fmt.Errorf("%s: %w", prefix, err)
	}
	return &cfg, nil
}
