package typcfg

import (
	"fmt"
	"strings"

	"github.com/typical-go/typical-go/pkg/common"
)

type (
	usageTmplData struct {
		Fields     []*Field
		EnvSnippet string
	}
)

const usageTmpl = `# Usage

<!-- Autogenerated by Typical-Go. DO NOT EDIT. 

Command to generate:
	./typicalw annotate

Annotation Tag:
	@app-cfg

Annotation Help:
	https://pkg.go.dev/github.com/typical-go/typical-rest-server/pkg/typcfg
-->

## Configuration List
| Field Name | Default | Required | 
|---|---|:---:|{{range $f := .Fields}}
| {{$f.Key}} | {{$f.Default}} | {{if $f.Required}}Yes{{end}} |{{end}}

## DotEnv example
{{.EnvSnippet}}
`

// GenerateUsage generate usage document
func GenerateUsage(target string, c *Context) error {
	fields := fields(c)
	fmt.Fprintf(Stdout, "Generate '%s'\n", target)
	return common.ExecuteTmplToFile(
		target,
		usageTmpl,
		usageTmplData{
			Fields:     fields,
			EnvSnippet: envSnippet(fields),
		},
	)
}

func fields(c *Context) []*Field {
	var fields []*Field
	for _, config := range c.Configs {
		for _, field := range config.Fields {
			fields = append(fields, field)
		}
	}
	return fields
}

func envSnippet(fields []*Field) string {
	var env strings.Builder
	fmt.Fprintln(&env, "```")
	for _, field := range fields {
		fmt.Fprintf(&env, "%s=%s\n", field.Key, field.Default)
	}
	fmt.Fprintln(&env, "```")
	return env.String()
}
