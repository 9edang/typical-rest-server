// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/music_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/typical-go/typical-rest-server/app/repository"
	reflect "reflect"
)

// MockMusicService is a mock of MusicService interface
type MockMusicService struct {
	ctrl     *gomock.Controller
	recorder *MockMusicServiceMockRecorder
}

// MockMusicServiceMockRecorder is the mock recorder for MockMusicService
type MockMusicServiceMockRecorder struct {
	mock *MockMusicService
}

// NewMockMusicService creates a new mock instance
func NewMockMusicService(ctrl *gomock.Controller) *MockMusicService {
	mock := &MockMusicService{ctrl: ctrl}
	mock.recorder = &MockMusicServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMusicService) EXPECT() *MockMusicServiceMockRecorder {
	return m.recorder
}

// FindOne mocks base method
func (m *MockMusicService) FindOne(arg0 context.Context, arg1 int64) (*repository.Music, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(*repository.Music)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockMusicServiceMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockMusicService)(nil).FindOne), arg0, arg1)
}

// Find mocks base method
func (m *MockMusicService) Find(arg0 context.Context) ([]*repository.Music, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].([]*repository.Music)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockMusicServiceMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMusicService)(nil).Find), arg0)
}

// Create mocks base method
func (m *MockMusicService) Create(arg0 context.Context, arg1 repository.Music) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMusicServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMusicService)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockMusicService) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMusicServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMusicService)(nil).Delete), arg0, arg1)
}

// Update mocks base method
func (m *MockMusicService) Update(arg0 context.Context, arg1 repository.Music) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockMusicServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMusicService)(nil).Update), arg0, arg1)
}
