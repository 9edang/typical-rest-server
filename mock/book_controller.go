// Code generated by MockGen. DO NOT EDIT.
// Source: app/controller/book_controller.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
	reflect "reflect"
)

// MockBookController is a mock of BookController interface
type MockBookController struct {
	ctrl     *gomock.Controller
	recorder *MockBookControllerMockRecorder
}

// MockBookControllerMockRecorder is the mock recorder for MockBookController
type MockBookControllerMockRecorder struct {
	mock *MockBookController
}

// NewMockBookController creates a new mock instance
func NewMockBookController(ctrl *gomock.Controller) *MockBookController {
	mock := &MockBookController{ctrl: ctrl}
	mock.recorder = &MockBookControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookController) EXPECT() *MockBookControllerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBookController) Create(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockBookControllerMockRecorder) Create(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookController)(nil).Create), c)
}

// Get mocks base method
func (m *MockBookController) Get(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockBookControllerMockRecorder) Get(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBookController)(nil).Get), c)
}

// List mocks base method
func (m *MockBookController) List(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List
func (mr *MockBookControllerMockRecorder) List(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBookController)(nil).List), c)
}

// Update mocks base method
func (m *MockBookController) Update(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockBookControllerMockRecorder) Update(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookController)(nil).Update), c)
}

// Delete mocks base method
func (m *MockBookController) Delete(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBookControllerMockRecorder) Delete(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookController)(nil).Delete), c)
}
