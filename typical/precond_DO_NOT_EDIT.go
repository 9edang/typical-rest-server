package typical

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
	"github.com/typical-go/typical-go/pkg/typapp"
	"github.com/typical-go/typical-go/pkg/typcfg"
	"github.com/typical-go/typical-rest-server/pkg/typpostgres"
	"github.com/typical-go/typical-rest-server/pkg/typredis"
	"github.com/typical-go/typical-rest-server/server/config"
	"github.com/typical-go/typical-rest-server/server/repository"
	"github.com/typical-go/typical-rest-server/server/service"
)

func init() {
	typapp.Provide(
		typapp.NewConstructor("", repository.NewBookRepo),
		typapp.NewConstructor("", service.NewBookService),
		typapp.NewConstructor("", func() (cfg *config.Config, err error) {
			cfg = new(config.Config)
			if err = typcfg.Process("APP", cfg); err != nil {
				return nil, err
			}
			return
		}),
		typapp.NewConstructor("", func() (cfg *typredis.Config, err error) {
			cfg = new(typredis.Config)
			if err = typcfg.Process("REDIS", cfg); err != nil {
				return nil, err
			}
			return
		}),
		typapp.NewConstructor("", func() (cfg *typpostgres.Config, err error) {
			cfg = new(typpostgres.Config)
			if err = typcfg.Process("PG", cfg); err != nil {
				return nil, err
			}
			return
		}),
	)
}
